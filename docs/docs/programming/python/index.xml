<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Nice API</title>
    <link>https://niceapi.github.io/docs/programming/python/</link>
    <description>Recent content in Python on Nice API</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://niceapi.github.io/docs/programming/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fastapi</title>
      <link>https://niceapi.github.io/docs/programming/python/fastapi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/python/fastapi/</guid>
      <description>基础 #  最小程序 #  from fastapi import FastAPI  app = FastAPI()  @app.get(&amp;#34;/&amp;#34;) async def root():  return {&amp;#34;message&amp;#34;: &amp;#34;Hello World&amp;#34;} 用uvicorn运行：
uvicorn main:app --reload # --reload跟flask中的debug功能一样 路由 #  为了准确防止用户名为“me”的用户抢占个人信息，要把“me”先定义在前面。
from fastapi import FastAPI  app = FastAPI()  @app.get(&amp;#34;/users/me&amp;#34;) async def read_user_me():  return {&amp;#34;user_id&amp;#34;: &amp;#34;the current user&amp;#34;}  @app.get(&amp;#34;/users/{user_id}&amp;#34;) async def read_user(user_id: str):  return {&amp;#34;user_id&amp;#34;: user_id} 路径包含 #  from fastapi import FastAPI  app = FastAPI()  @app.</description>
    </item>
    
    <item>
      <title>Flask Socket Io</title>
      <link>https://niceapi.github.io/docs/programming/python/flask-socket-io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/python/flask-socket-io/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Socket Io</title>
      <link>https://niceapi.github.io/docs/programming/python/socket-io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/python/socket-io/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Sqlalchemy</title>
      <link>https://niceapi.github.io/docs/programming/python/sqlalchemy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/python/sqlalchemy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>推导式</title>
      <link>https://niceapi.github.io/docs/programming/python/derivation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/python/derivation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>迭代器和生成器</title>
      <link>https://niceapi.github.io/docs/programming/python/iter-and-next/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/python/iter-and-next/</guid>
      <description></description>
    </item>
    
    <item>
      <title>多线程</title>
      <link>https://niceapi.github.io/docs/programming/python/thread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/python/thread/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Asyncio</title>
      <link>https://niceapi.github.io/docs/programming/python/asyncio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/python/asyncio/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Requests</title>
      <link>https://niceapi.github.io/docs/programming/python/requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/python/requests/</guid>
      <description>发送请求 #  req = requests.get(url) req = requests.post(url,data={&amp;#39;key&amp;#39;:&amp;#39;value&amp;#39;}) req = requests.put(url,data={&amp;#39;key&amp;#39;:&amp;#39;value&amp;#39;}) req = requests.delete(url) req = requests.head(url) req = requests.options(url) 响应内容
req.url req.txet req.json() req.status_code req.history </description>
    </item>
    
    <item>
      <title>PyMySQL</title>
      <link>https://niceapi.github.io/docs/programming/python/pymysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/python/pymysql/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Flask Web</title>
      <link>https://niceapi.github.io/docs/programming/python/flask/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/python/flask/</guid>
      <description>最小应用 #  from flask import Flask  app = Flask(__name__)  @app.route(&amp;#39;/&amp;#39;) def index():  return &amp;#39;Hello World!&amp;#39;  if __name__ == &amp;#39;__main__&amp;#39;:  app.run(host = &amp;#39;0.0.0.0&amp;#39;, port = &amp;#39;5000&amp;#39;) 路由、参数 #  from markupsafe import escape  @app.route(&amp;#39;/user/&amp;lt;username&amp;gt;&amp;#39;) def show_user_profile(username):  # show the user profile for that user  return f&amp;#39;User {escape(username)}&amp;#39;  @app.route(&amp;#39;/post/&amp;lt;int:post_id&amp;gt;&amp;#39;) def show_post(post_id):  # show the post with the given id, the id is an integer  return f&amp;#39;Post {post_id}&amp;#39;  @app.</description>
    </item>
    
  </channel>
</rss>
