<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nice API</title>
    <link>https://niceapi.github.io/</link>
    <description>Recent content on Nice API</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 04 Mar 2022 13:37:57 +0000</lastBuildDate><atom:link href="https://niceapi.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fastapi</title>
      <link>https://niceapi.github.io/docs/programming/python/fastapi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/python/fastapi/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Flask Socket Io</title>
      <link>https://niceapi.github.io/docs/programming/python/flask-socket-io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/python/flask-socket-io/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Shell</title>
      <link>https://niceapi.github.io/docs/programming/linux/shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/linux/shell/</guid>
      <description>Shell
expect #  </description>
    </item>
    
    <item>
      <title>Socket Io</title>
      <link>https://niceapi.github.io/docs/programming/python/socket-io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/python/socket-io/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Sqlalchemy</title>
      <link>https://niceapi.github.io/docs/programming/python/sqlalchemy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/python/sqlalchemy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>快速开始</title>
      <link>https://niceapi.github.io/docs/dev/typecho/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/dev/typecho/guide/</guid>
      <description>比官方文档更加丰富
 页面结构 内容输出 自定义字段 组件 评论 留言墙 友情链接 通用样式 JavaScript功能  </description>
    </item>
    
    <item>
      <title>推导式</title>
      <link>https://niceapi.github.io/docs/programming/python/derivation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/python/derivation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>行情数据接口</title>
      <link>https://niceapi.github.io/docs/quant/bybit/market-data-endpionts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/quant/bybit/market-data-endpionts/</guid>
      <description>API #  注意，本文档仅针对USDT合约交易对。
RESTful接口
 测试网 https://api-testnet.bybit.com 主网1 https://api.bybit.com 主网2 https://api.bytick.com  测试接口
from pybit import HTTP session = HTTP(&amp;#34;https://api-testnet.bybit.com&amp;#34;) print(session.orderbook(symbol=&amp;#34;BTCUSD&amp;#34;)) 查询k线数据 #  请求参数
   参数 是否必须 类型 说明     symbol true string 交易对   interval true string K线周期   from true int 起始时间   limit false int k线数量，最大200    from pybit import HTTP session = HTTP(&amp;#34;https://api-testnet.bybit.com&amp;#34;) print(session.query_kline(  symbol=&amp;#34;BTCUSD&amp;#34;,  interval=&amp;#34;m&amp;#34;, 	from_time=1581231260 	)) 返回参数</description>
    </item>
    
    <item>
      <title>迭代器和生成器</title>
      <link>https://niceapi.github.io/docs/programming/python/iter-and-next/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/python/iter-and-next/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Vim</title>
      <link>https://niceapi.github.io/docs/programming/linux/vim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/linux/vim/</guid>
      <description>基础操作 #  一般模式 #  编辑模式 #  底线模式 #  搜索替换：
# 用法:n1,n2s/word1/word2/g# 示例:1,$s/word1/word2/g:1,$s/word1/word2/gc:50,100s/word1/word2/gc插件 #  vim8插件管理器 #  创建两个文件夹：
mkdir .vim/pack/[name]/start -p mkdir .vim/pack/[name]/opt -p start是自动加载，opt是手动加载，手动加载命令：
:packadd [plugin]安装插件帮助文档，每个插件都有个doc文件夹用来存放帮助文档，进入vim：
:helptags .vim/pack/[name]/start/[plugin]/docycm #  apt install vim-gtk3 vim-addon-manager vim-youcompleteme vim-python-jedi vam install youcompleteme python-jedi emmet-vim #  写前端必备的emmet插件
git clone https://github.com/mattn/emmet-vim.git cd emmet-vim mkdir .vim mkdir .vim/plugin mkdir .vim/autoload cp plugin/emmet.vim ~/.vim/plugin/ cp autoload/emmet.vim ~/.vim/autoload/ cp -a autoload/emmet ~/.vim/autoload/ </description>
    </item>
    
    <item>
      <title>交易数据接口</title>
      <link>https://niceapi.github.io/docs/quant/bybit/trading-data-endpionts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/quant/bybit/trading-data-endpionts/</guid>
      <description>活动单 #  创建活动委托单 #  from pybit import HTTP session = HTTP(&amp;#34;https://api-testnet.bybit.com&amp;#34;,  api_key=&amp;#34;&amp;#34;, api_secret=&amp;#34;&amp;#34;) print(session.place_active_order(  symbol=&amp;#34;BTCUSDT&amp;#34;,  side=&amp;#34;Sell&amp;#34;,  order_type=&amp;#34;Limit&amp;#34;,  qty=0.01,  price=8083,  time_in_force=&amp;#34;GoodTillCancel&amp;#34;,  reduce_only=False,  close_on_trigger=False )) 查询活动委托单 #  from pybit import HTTP session = HTTP(&amp;#34;https://api-testnet.bybit.com&amp;#34;,  api_key=&amp;#34;&amp;#34;, api_secret=&amp;#34;&amp;#34;) print(session.get_active_order(  symbol=&amp;#34;BTCUSDT&amp;#34; )) 撤销活动委托单 #  from pybit import HTTP session = HTTP(&amp;#34;https://api-testnet.bybit.com&amp;#34;,  api_key=&amp;#34;&amp;#34;, api_secret=&amp;#34;&amp;#34;) print(session.cancel_active_order(  symbol=&amp;#34;BTCUSDT&amp;#34;,  order_id=&amp;#34;&amp;#34; )) 撤销所有活动委托单 #  from pybit import HTTP session = HTTP(&amp;#34;https://api-testnet.</description>
    </item>
    
    <item>
      <title>多线程</title>
      <link>https://niceapi.github.io/docs/programming/python/thread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/python/thread/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Asyncio</title>
      <link>https://niceapi.github.io/docs/programming/python/asyncio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/python/asyncio/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Axios</title>
      <link>https://niceapi.github.io/docs/programming/javascript/axios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/javascript/axios/</guid>
      <description>CDN #  jsDelivr
&amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; unpkg
&amp;lt;script src=&amp;#34;https://unpkg.com/axios/dist/axios.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; GET #  以下所有例子将省略本行代码：
const axios = require(&amp;#39;axios&amp;#39;); 最简单的请求（默认GET）：
axios(&amp;#39;/user/12345&amp;#39;); // 向给定ID的用户发起请求 axios.get(&amp;#39;/user?ID=12345&amp;#39;)  .then(function (response) {  // 处理成功情况  console.log(response);  })  .catch(function (error) {  // 处理错误情况  console.log(error);  })  .then(function () {  // 总是会执行  }); 换种写法：
axios.get(&amp;#39;/user&amp;#39;, {  params: {  ID: 12345  }  })  .then(function (response) {  console.</description>
    </item>
    
    <item>
      <title>Mysql</title>
      <link>https://niceapi.github.io/docs/programming/linux/mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/linux/mysql/</guid>
      <description>启动Mariadb #  测试启动：
mariadbd # or mysqld mysqladmin --version 相关命令：
systemctl start mariadb #启动MariaDB systemctl stop mariadb #停止MariaDB systemctl restart mariadb #重启MariaDB systemctl enable mariadb #设置开机启动 打开mysql客户端：
# 无密码登陆 mysql # 指定账户密码登陆 mysql -h [host] -u [user] -p 创建、删除数据库 #  CREATE DATABASE [NAME]; DROP DATABASE [NAME]; USE [NAME]; SHOW DATABASES; 数据类型 #  数值 #     类型 范围都是一样，，有符号要减一半分去负数那边     TINYINT 无符号：0~255, 有符号：-128~127   SMALLINT 65535   MEDIUMINT 16777215   INT 4294967295   BIGINT 18446744073709551615   FLOAT 别管了，精度低用这个速度快   DOUBLE 总之你用不完，精度高用这个数度快   DECIMAL     时间 #     类型 格式 用途     DATE YYYY-MM-DD 日期值   TIME HH:MM:SS 时间值   YEAR YYYY 年值（1901~2155）   DATETIME YYYY-MM-DD HH:MM:SS 混合日期和时间值   DATESTAMP YYYYMMDD HHMMSS 时间戳    字符串 #     类型 大小（单位：bytes） 用途     CHAR 0-255 定长字符串   VARCHAR 0-65535 变长字符串   TINYBLOB 0-255 不超过 255 个字符的二进制字符串   TINYTEXT 0-255 短文本字符串   BLOB 0-65535 二进制形式的长文本数据   TEXT 0-65535 长文本数据   MEDIUMBLOB 0-16777 二进制形式的中等长度文本数据   MEDIUMTEXT 0-16777 中等长度文本数据   LONGBLOB 0-4294967295 二进制形式的极大文本数据   LONGTEXT 0-4294967295 极大文本数据    创建、删除表 #  创建表语法：</description>
    </item>
    
    <item>
      <title>钱包数据接口</title>
      <link>https://niceapi.github.io/docs/quant/bybit/wallet-data-endpionts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/quant/bybit/wallet-data-endpionts/</guid>
      <description>账户划转 #  合约、现货、理财账户资金划转 #  from pybit import HTTP from uuid import uuid4 session = HTTP(&amp;#34;https://api-testnet.bybit.com&amp;#34;,  api_key=&amp;#34;&amp;#34;, api_secret=&amp;#34;&amp;#34;) print(session.create_internal_transfer(  transfer_id=str(uuid4()),  coin=&amp;#34;BTC&amp;#34;,  amount=&amp;#34;0.1&amp;#34;,  from_account_type=&amp;#34;SPOT&amp;#34;,  to_account_type=&amp;#34;CONTRACT&amp;#34; )) 子母账户划转 #  from pybit import HTTP from uuid import uuid4 session = HTTP(&amp;#34;https://api-testnet.bybit.com&amp;#34;,  api_key=&amp;#34;&amp;#34;, api_secret=&amp;#34;&amp;#34;) print(session.create_subaccount_transfer(  transfer_id=str(uuid4()), # UUID，全局唯一  coin=&amp;#34;BTC&amp;#34;,  amount=&amp;#34;0.1&amp;#34;,  sub_user_id=251711, # 子账户id  type=&amp;#34;IN&amp;#34; # 转入转出类型 )) </description>
    </item>
    
    <item>
      <title>其他接口</title>
      <link>https://niceapi.github.io/docs/quant/bybit/api-data-endpionts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/quant/bybit/api-data-endpionts/</guid>
      <description>获取bybit服务器时间 #  from pybit import HTTP session = HTTP(&amp;#34;https://api-testnet.bybit.com&amp;#34;) print(session.server_time()) 返回结果：
{  &amp;#34;ret_code&amp;#34;: 0,  &amp;#34;ret_msg&amp;#34;: &amp;#34;OK&amp;#34;,  &amp;#34;ext_code&amp;#34;: &amp;#34;&amp;#34;,  &amp;#34;ext_info&amp;#34;: &amp;#34;&amp;#34;,  &amp;#34;result&amp;#34;: {},  &amp;#34;time_now&amp;#34;: &amp;#34;1577444332.192859&amp;#34; } </description>
    </item>
    
    <item>
      <title>Requests</title>
      <link>https://niceapi.github.io/docs/programming/python/requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/python/requests/</guid>
      <description>发送请求 #  req = requests.get(url) req = requests.post(url,data={&amp;#39;key&amp;#39;:&amp;#39;value&amp;#39;}) req = requests.put(url,data={&amp;#39;key&amp;#39;:&amp;#39;value&amp;#39;}) req = requests.delete(url) req = requests.head(url) req = requests.options(url) 响应内容
req.url req.txet req.json() req.status_code req.history </description>
    </item>
    
    <item>
      <title>PyMySQL</title>
      <link>https://niceapi.github.io/docs/programming/python/pymysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/python/pymysql/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Flask Web</title>
      <link>https://niceapi.github.io/docs/programming/python/flask/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/python/flask/</guid>
      <description>最小应用 #  from flask import Flask  app = Flask(__name__)  @app.route(&amp;#39;/&amp;#39;) def index():  return &amp;#39;Hello World!&amp;#39;  if __name__ == &amp;#39;__main__&amp;#39;:  app.run(host = &amp;#39;0.0.0.0&amp;#39;, port = &amp;#39;5000&amp;#39;) 路由、参数 #  from markupsafe import escape  @app.route(&amp;#39;/user/&amp;lt;username&amp;gt;&amp;#39;) def show_user_profile(username):  # show the user profile for that user  return f&amp;#39;User {escape(username)}&amp;#39;  @app.route(&amp;#39;/post/&amp;lt;int:post_id&amp;gt;&amp;#39;) def show_post(post_id):  # show the post with the given id, the id is an integer  return f&amp;#39;Post {post_id}&amp;#39;  @app.</description>
    </item>
    
    <item>
      <title>渐进式加载</title>
      <link>https://niceapi.github.io/docs/programming/javascript/pwa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://niceapi.github.io/docs/programming/javascript/pwa/</guid>
      <description>目录结构 #   /icons/ /style/ index.html manifest.json sw.js  </description>
    </item>
    
    <item>
      <title>涨跌幅、振幅计算公式</title>
      <link>https://niceapi.github.io/posts/formula1/</link>
      <pubDate>Fri, 04 Mar 2022 14:34:41 +0000</pubDate>
      
      <guid>https://niceapi.github.io/posts/formula1/</guid>
      <description>公式 #  昨日收盘=今日开盘 涨跌幅=（收盘-开盘）÷开盘 振幅=（最高-最低）÷开盘
python保存两位小数
format(5.057, &amp;#39;.2f&amp;#39;) 5.06 后续是不是应该把常用指标的计算公式给加入到文档中？</description>
    </item>
    
  </channel>
</rss>
